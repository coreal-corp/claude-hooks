:<<BATCH
@echo off
REM ================================================================================
REM Claude Code Hooks - Universal Installation Script (Windows)
REM This section runs on Windows systems
REM ================================================================================

setlocal enabledelayedexpansion

echo.
echo ======================================
echo   Claude Code Hooks - Installation
echo ======================================
echo.

REM Required Python version
set "REQUIRED_PYTHON_MAJOR=3"
set "REQUIRED_PYTHON_MINOR=6"

REM Script directory
set "SCRIPT_DIR=%~dp0"
set "HOOKS_DIR=%USERPROFILE%\.claude-hooks"
set "ENV_FILE=%USERPROFILE%\.ultrathink.env"

REM Step 1: Check Python installation
echo [*] Step 1: Python version check...

set "PYTHON_CMD="

REM Check python3 command
where python3 >nul 2>&1
if %errorlevel% equ 0 (
    for /f "tokens=2" %%v in ('python3 --version 2^>^&1') do set "PYTHON_VERSION=%%v"
    call :check_version "!PYTHON_VERSION!"
    if !errorlevel! equ 0 (
        set "PYTHON_CMD=python3"
        echo [+] Python 3 found: !PYTHON_VERSION!
        goto :python_found_win
    )
)

REM Check python command
where python >nul 2>&1
if %errorlevel% equ 0 (
    for /f "tokens=2" %%v in ('python --version 2^>^&1') do set "PYTHON_VERSION=%%v"
    call :check_version "!PYTHON_VERSION!"
    if !errorlevel! equ 0 (
        set "PYTHON_CMD=python"
        echo [+] Python found: !PYTHON_VERSION!
        goto :python_found_win
    )
)

REM Python not found - install
echo [!] Python 3.6+ not found.
echo.
echo Python installation required. Install automatically? (y/n)
set /p "INSTALL_CHOICE=Choice: "

if /i not "!INSTALL_CHOICE!"=="y" (
    echo.
    echo [i] Manual installation selected.
    echo.
    echo Install Python 3.6+ using one of these methods:
    echo.
    echo   1. Official site: https://www.python.org/downloads/
    echo   2. winget: winget install Python.Python.3
    echo   3. Chocolatey: choco install python
    echo.
    echo Run this script again after installation.
    pause
    exit /b 1
)

REM Try to install Python
echo.
echo [*] Attempting automatic Python installation...

REM Check if winget is available (Windows 10+)
where winget >nul 2>&1
if %errorlevel% equ 0 (
    echo [i] Installing Python using winget...
    echo [i] Administrator privileges may be required.
    winget install Python.Python.3 --silent --accept-package-agreements --accept-source-agreements
    if %errorlevel% equ 0 (
        echo [+] Python installation complete!
        echo [*] Searching for Python executable...
        echo.

        REM Search common Python installation paths
        set "FOUND_PYTHON="

        REM 1. User installation path (most common - winget default)
        for /d %%p in ("%LOCALAPPDATA%\Programs\Python\Python3*") do (
            if exist "%%p\python.exe" (
                set "PYTHON_CMD=%%p\python.exe"
                set "FOUND_PYTHON=1"
                goto :python_found_after_install_win
            )
        )

        REM 2. WindowsApps path (Microsoft Store version)
        if exist "%LOCALAPPDATA%\Microsoft\WindowsApps\python.exe" (
            set "PYTHON_CMD=%LOCALAPPDATA%\Microsoft\WindowsApps\python.exe"
            set "FOUND_PYTHON=1"
            goto :python_found_after_install_win
        )

        REM 3. Program Files path (system-wide installation)
        for /d %%p in ("%ProgramFiles%\Python3*") do (
            if exist "%%p\python.exe" (
                set "PYTHON_CMD=%%p\python.exe"
                set "FOUND_PYTHON=1"
                goto :python_found_after_install_win
            )
        )

        REM 4. C:\ root path (legacy installation)
        for /d %%p in ("C:\Python3*") do (
            if exist "%%p\python.exe" (
                set "PYTHON_CMD=%%p\python.exe"
                set "FOUND_PYTHON=1"
                goto :python_found_after_install_win
            )
        )

        REM Path not found - fallback to restart advice
        echo [!] Python executable not found.
        echo [i] Please restart terminal to update PATH.
        echo.
        echo Run this script again after restarting.
        pause
        exit /b 0
    ) else (
        echo [!] winget installation failed
        goto :manual_install_win
    )
) else (
    echo [!] winget not found.
    goto :manual_install_win
)

:manual_install_win
echo.
echo [i] Automatic installation failed. Manual installation required.
echo.
echo Download Python from:
echo https://www.python.org/downloads/
echo.
echo Make sure to check "Add Python to PATH" during installation!
echo.
pause
exit /b 1

:python_found_after_install_win
REM Python found after installation - continue with setup
echo [+] Python found: %PYTHON_CMD%
echo.

:python_found_win
REM Verify Python modules
echo [*] Verifying Python modules...
%PYTHON_CMD% -c "import sys; import json; import os; import urllib.request" 2>nul
if %errorlevel% neq 0 (
    echo [!] Python module verification failed
    exit /b 1
)
echo [+] Required Python modules verified

REM Step 2: Create hooks directory
echo.
echo [*] Step 2: Creating hooks directory...

if not exist "%HOOKS_DIR%" (
    mkdir "%HOOKS_DIR%"
    echo [+] Directory created: %HOOKS_DIR%
) else (
    echo [i] Directory already exists: %HOOKS_DIR%
)

REM Step 3: Copy hook files
echo.
echo [*] Step 3: Copying hook files...

set "FILES=SessionStart SessionEnd Stop Notification analyze_transcript.py"

for %%f in (%FILES%) do (
    if exist "%SCRIPT_DIR%%%f" (
        copy /y "%SCRIPT_DIR%%%f" "%HOOKS_DIR%\" >nul
        echo [+] Copied: %%f
    ) else (
        echo [!] File not found: %%f
    )
)

REM Step 4: Create environment file template
echo.
echo [*] Step 4: Creating environment variables file...

if not exist "%ENV_FILE%" (
    (
        echo # Claude Code Slack Hooks Configuration
        echo.
        echo # Slack Bot Token (required - starts with xoxb-^)
        echo SLACK_BOT_TOKEN=xoxb-YOUR-TOKEN-HERE
        echo.
        echo # Slack Channel ID (required - 11 chars starting with C, no # prefix^)
        echo SLACK_CHANNEL_ID=C09J29WDSHK
        echo.
        echo # Enable auto-logging
        echo ULTRATHINK_AUTO_LOG=true
        echo.
        echo # User name (optional^)
        echo SLACK_USER_NAME=your_name
    ) > "%ENV_FILE%"
    echo [+] Environment template created: %ENV_FILE%
    echo [!] Edit %ENV_FILE% to set your Slack token!
) else (
    echo [i] Environment file already exists: %ENV_FILE%
)

REM Step 5: Verify installation
echo.
echo [*] Step 5: Verifying installation...

set "VERIFICATION_PASSED=1"

for %%f in (%FILES%) do (
    if not exist "%HOOKS_DIR%\%%f" (
        echo [!] File missing: %%f
        set "VERIFICATION_PASSED=0"
    )
)

if not exist "%ENV_FILE%" (
    echo [!] Environment file missing: %ENV_FILE%
    set "VERIFICATION_PASSED=0"
)

if !VERIFICATION_PASSED! equ 1 (
    echo [+] All verifications passed!
) else (
    echo [!] Some verifications failed. Check messages above.
    pause
    exit /b 1
)

REM Installation complete
echo.
echo ======================================
echo [+] Installation Complete!
echo ======================================
echo.
echo [i] Next steps:
echo.
echo   1. Set Slack token:
echo      notepad "%ENV_FILE%"
echo.
echo   2. Replace SLACK_BOT_TOKEN with your actual token
echo.
echo   3. Test:
echo      echo {"initial_user_message":"test"} ^| %PYTHON_CMD% "%HOOKS_DIR%\SessionStart"
echo.
echo   4. Check Slack channel for notification
echo.
echo [i] Troubleshooting:
echo      type %%TEMP%%\claude-hook-debug.log
echo.
pause
exit /b 0

REM Function: Check Python version
:check_version
set "VERSION=%~1"
for /f "tokens=1,2 delims=." %%a in ("%VERSION%") do (
    set "MAJOR=%%a"
    set "MINOR=%%b"
)

if %MAJOR% gtr %REQUIRED_PYTHON_MAJOR% (
    exit /b 0
)
if %MAJOR% equ %REQUIRED_PYTHON_MAJOR% (
    if %MINOR% geq %REQUIRED_PYTHON_MINOR% (
        exit /b 0
    )
)
exit /b 1

BATCH

# ================================================================================
# Claude Code Hooks - Universal Installation Script (Unix)
# This section runs on Linux, macOS, and WSL
# ================================================================================

#!/bin/bash

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Emojis for visual feedback
STEP="🎯"
SUCCESS="✅"
ERROR="❌"
WARNING="⚠️"
INFO="ℹ️"

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
HOOKS_DIR="$HOME/.claude-hooks"

# Required Python version
REQUIRED_PYTHON_VERSION="3.6"

echo ""
echo "======================================"
echo "  Claude Code Hooks - Installation"
echo "======================================"
echo ""

# Function: Print colored message
print_msg() {
    local type=$1
    shift
    case $type in
        success) echo -e "${GREEN}${SUCCESS} $*${NC}" ;;
        error)   echo -e "${RED}${ERROR} $*${NC}" ;;
        warning) echo -e "${YELLOW}${WARNING} $*${NC}" ;;
        info)    echo -e "${BLUE}${INFO} $*${NC}" ;;
        step)    echo -e "${BLUE}${STEP} $*${NC}" ;;
    esac
}

# Function: Check Python version
check_python_version() {
    local python_cmd=$1

    if ! command -v "$python_cmd" &> /dev/null; then
        return 1
    fi

    local version=$($python_cmd --version 2>&1 | awk '{print $2}')
    local major=$(echo "$version" | cut -d. -f1)
    local minor=$(echo "$version" | cut -d. -f2)

    if [ "$major" -eq 3 ] && [ "$minor" -ge 6 ]; then
        echo "$python_cmd"
        return 0
    fi

    return 1
}

# Function: Detect OS and package manager
detect_os() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    elif [[ -f /etc/os-release ]]; then
        . /etc/os-release
        case "$ID" in
            ubuntu|debian) echo "debian" ;;
            centos|rhel)   echo "rhel" ;;
            fedora)        echo "fedora" ;;
            *)             echo "linux" ;;
        esac
    else
        echo "unknown"
    fi
}

# Function: Install Python on Debian/Ubuntu
install_python_debian() {
    print_msg step "Installing Python on Debian/Ubuntu system..."

    if ! command -v sudo &> /dev/null; then
        print_msg error "sudo command not found. Administrator privileges required."
        return 1
    fi

    print_msg info "Updating package list..."
    sudo apt update || return 1

    print_msg info "Installing Python 3..."
    sudo apt install -y python3 python3-pip || return 1

    return 0
}

# Function: Install Python on RHEL/CentOS
install_python_rhel() {
    print_msg step "Installing Python on RHEL/CentOS system..."

    if ! command -v sudo &> /dev/null; then
        print_msg error "sudo command not found. Administrator privileges required."
        return 1
    fi

    print_msg info "Installing Python 3..."
    sudo yum install -y python3 python3-pip || return 1

    return 0
}

# Function: Install Python on Fedora
install_python_fedora() {
    print_msg step "Installing Python on Fedora system..."

    if ! command -v sudo &> /dev/null; then
        print_msg error "sudo command not found. Administrator privileges required."
        return 1
    fi

    print_msg info "Installing Python 3..."
    sudo dnf install -y python3 python3-pip || return 1

    return 0
}

# Function: Install Python on macOS
install_python_macos() {
    print_msg step "Installing Python on macOS system..."

    # Check if Homebrew is installed
    if command -v brew &> /dev/null; then
        print_msg info "Installing Python using Homebrew..."
        brew install python3 || return 1
        return 0
    else
        print_msg warning "Homebrew not installed."
        print_msg info "Choose one of these options:"
        echo ""
        echo "  1) Install Homebrew then Python (recommended)"
        echo "     /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
        echo "     brew install python3"
        echo ""
        echo "  2) Download from official Python site"
        echo "     https://www.python.org/downloads/"
        echo ""
        return 1
    fi
}

# Function: Prompt user for Python installation
prompt_python_install() {
    local os_type=$1

    print_msg warning "Python 3.6 or higher not installed."
    echo ""
    echo "Python installation required. Install automatically? (y/n)"
    read -r response

    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        print_msg info "Manual installation selected."
        echo ""
        print_msg info "Install Python 3.6+ using one of these methods:"
        case "$os_type" in
            debian)
                echo "  sudo apt update && sudo apt install python3 python3-pip"
                ;;
            rhel)
                echo "  sudo yum install python3 python3-pip"
                ;;
            fedora)
                echo "  sudo dnf install python3 python3-pip"
                ;;
            macos)
                echo "  brew install python3"
                echo "  OR download from https://www.python.org/downloads/"
                ;;
            *)
                echo "  https://www.python.org/downloads/"
                ;;
        esac
        echo ""
        return 1
    fi

    return 0
}

# Step 1: Check Python installation
print_msg step "Step 1: Python version check..."

PYTHON_CMD=""
if python_result=$(check_python_version "python3"); then
    PYTHON_CMD="$python_result"
    print_msg success "Python 3 found: $(python3 --version)"
elif python_result=$(check_python_version "python"); then
    PYTHON_CMD="$python_result"
    print_msg success "Python found: $(python --version)"
else
    print_msg warning "Python 3.6 or higher not found."

    # Detect OS
    OS_TYPE=$(detect_os)
    print_msg info "Operating system: $OS_TYPE"

    # Ask user for installation
    if prompt_python_install "$OS_TYPE"; then
        case "$OS_TYPE" in
            debian)
                if install_python_debian; then
                    PYTHON_CMD="python3"
                    print_msg success "Python installation complete!"
                else
                    print_msg error "Python installation failed. Please install manually."
                    exit 1
                fi
                ;;
            rhel)
                if install_python_rhel; then
                    PYTHON_CMD="python3"
                    print_msg success "Python installation complete!"
                else
                    print_msg error "Python installation failed. Please install manually."
                    exit 1
                fi
                ;;
            fedora)
                if install_python_fedora; then
                    PYTHON_CMD="python3"
                    print_msg success "Python installation complete!"
                else
                    print_msg error "Python installation failed. Please install manually."
                    exit 1
                fi
                ;;
            macos)
                if install_python_macos; then
                    PYTHON_CMD="python3"
                    print_msg success "Python installation complete!"
                else
                    print_msg error "Python installation failed. Please install manually."
                    exit 1
                fi
                ;;
            *)
                print_msg error "Unsupported operating system."
                print_msg info "Please install manually from https://www.python.org/downloads/"
                exit 1
                ;;
        esac
    else
        exit 1
    fi
fi

# Verify Python installation
print_msg step "Verifying Python installation..."
if $PYTHON_CMD -c "import sys; import json; import os; import urllib.request" 2>/dev/null; then
    print_msg success "Required Python modules verified"
else
    print_msg error "Python module verification failed"
    exit 1
fi

# Step 2: Create hooks directory
print_msg step "Step 2: Creating hooks directory..."

if [ ! -d "$HOOKS_DIR" ]; then
    mkdir -p "$HOOKS_DIR"
    print_msg success "Directory created: $HOOKS_DIR"
else
    print_msg info "Directory already exists: $HOOKS_DIR"
fi

# Step 3: Copy hook files
print_msg step "Step 3: Copying hook files..."

HOOK_FILES=("SessionStart" "SessionEnd" "Stop" "Notification" "analyze_transcript.py" "auto_update.py" "auto_push_gitlab.py" "setup_gitlab.py" "update")

for file in "${HOOK_FILES[@]}"; do
    if [ -f "$SCRIPT_DIR/$file" ]; then
        cp "$SCRIPT_DIR/$file" "$HOOKS_DIR/"
        chmod +x "$HOOKS_DIR/$file"
        print_msg success "Copied: $file"
    else
        print_msg warning "File not found: $file"
    fi
done

# Step 4: Create environment file template
print_msg step "Step 4: Creating environment variables file..."

ENV_FILE="$HOME/.ultrathink.env"

if [ ! -f "$ENV_FILE" ]; then
    cat > "$ENV_FILE" << 'EOF'
# Claude Code Slack Hooks Configuration

# Slack Bot Token (required - starts with xoxb-)
SLACK_BOT_TOKEN=xoxb-YOUR-TOKEN-HERE

# Slack Channel ID (required - 11 chars starting with C, no # prefix)
SLACK_CHANNEL_ID=C09J29WDSHK

# Enable auto-logging
ULTRATHINK_AUTO_LOG=true

# User name (optional)
SLACK_USER_NAME=your_name

# Auto-update settings
AUTO_UPDATE_ENABLED=true
UPDATE_CHECK_INTERVAL=86400

# GitLab Auto-Push Settings
# Enable auto-push to GitLab when file changes are detected
GITLAB_AUTO_PUSH_ENABLED=false

# GitLab repository URL (e.g., https://gitlab.com/your-username/your-repo.git)
GITLAB_REPO_URL=

# GitLab Access Token (optional - for private repos)
# Create at: GitLab > Settings > Access Tokens
GITLAB_ACCESS_TOKEN=

# GitLab remote name (default: gitlab)
GITLAB_REMOTE_NAME=gitlab

# Custom commit message (optional - auto-generated if not set)
GITLAB_AUTO_COMMIT_MESSAGE=
EOF
    print_msg success "Environment template created: $ENV_FILE"
    print_msg warning "Edit $ENV_FILE to set your Slack token!"
else
    print_msg info "Environment file already exists: $ENV_FILE"
fi

# Step 5: Verify installation
print_msg step "Step 5: Verifying installation..."

VERIFICATION_PASSED=true

# Check hook files
for file in "${HOOK_FILES[@]}"; do
    if [ ! -f "$HOOKS_DIR/$file" ]; then
        print_msg error "File missing: $file"
        VERIFICATION_PASSED=false
    elif [ ! -x "$HOOKS_DIR/$file" ]; then
        print_msg warning "No execute permission: $file"
        chmod +x "$HOOKS_DIR/$file"
        print_msg success "Permission fixed: $file"
    fi
done

# Check environment file
if [ ! -f "$ENV_FILE" ]; then
    print_msg error "Environment file missing: $ENV_FILE"
    VERIFICATION_PASSED=false
fi

if [ "$VERIFICATION_PASSED" = true ]; then
    print_msg success "All verifications passed!"
else
    print_msg error "Some verifications failed. Check messages above."
    exit 1
fi

# Installation complete
echo ""
echo "======================================"
print_msg success "Installation Complete!"
echo "======================================"
echo ""
print_msg info "Next steps:"
echo ""
echo "  1. Set Slack token:"
echo "     nano $ENV_FILE"
echo "     (or use your preferred editor)"
echo ""
echo "  2. Replace SLACK_BOT_TOKEN with your actual token"
echo ""
echo "  3. Test:"
echo "     echo '{\"initial_user_message\":\"test\"}' | $HOOKS_DIR/SessionStart"
echo ""
echo "  4. Check Slack channel for notification"
echo ""
print_msg info "Troubleshooting:"
echo "     tail -f /tmp/claude-hook-debug.log"
echo ""
