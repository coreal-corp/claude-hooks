#!/usr/bin/env python3
"""
Claude Hooks - Complete Interactive Setup
Asks for all configurations and remembers previous settings
"""
import os
import sys
import json
import subprocess
import shutil
from pathlib import Path


def print_header(text):
    """Print section header"""
    print(f"\n{'='*60}")
    print(f"  {text}")
    print(f"{'='*60}\n")


def print_step(step, text):
    """Print step message"""
    print(f"\n[Step {step}] {text}")
    print("-" * 60)


def print_success(text):
    """Print success message"""
    print(f"✅ {text}")


def print_warning(text):
    """Print warning message"""
    print(f"⚠️  {text}")


def print_info(text):
    """Print info message"""
    print(f"ℹ️  {text}")


def load_existing_config():
    """Load existing configuration from ~/.ultrathink.env"""
    env_file = Path.home() / '.ultrathink.env'
    config = {}

    if not env_file.exists():
        return config

    print_info("Found existing configuration")

    with open(env_file, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                config[key.strip()] = value.strip().strip('"').strip("'")

    return config


def save_config(config):
    """Save configuration to ~/.ultrathink.env"""
    env_file = Path.home() / '.ultrathink.env'

    lines = [
        "# Claude Code Slack Hooks Configuration\n",
        "# Auto-generated by setup-complete.py\n",
        "\n",
        "# Slack Settings\n",
        f"SLACK_BOT_TOKEN={config.get('SLACK_BOT_TOKEN', '')}\n",
        f"SLACK_CHANNEL_ID={config.get('SLACK_CHANNEL_ID', '')}\n",
        f"SLACK_USER_NAME={config.get('SLACK_USER_NAME', '')}\n",
        f"ULTRATHINK_AUTO_LOG={config.get('ULTRATHINK_AUTO_LOG', 'true')}\n",
        "\n",
        "# Auto-update Settings\n",
        f"AUTO_UPDATE_ENABLED={config.get('AUTO_UPDATE_ENABLED', 'true')}\n",
        f"UPDATE_CHECK_INTERVAL={config.get('UPDATE_CHECK_INTERVAL', '86400')}\n",
        "\n",
        "# GitLab Auto-Push Settings\n",
        f"GITLAB_AUTO_PUSH_ENABLED={config.get('GITLAB_AUTO_PUSH_ENABLED', 'false')}\n",
        f"GITLAB_REPO_URL={config.get('GITLAB_REPO_URL', '')}\n",
        f"GITLAB_ACCESS_TOKEN={config.get('GITLAB_ACCESS_TOKEN', '')}\n",
        f"GITLAB_REMOTE_NAME={config.get('GITLAB_REMOTE_NAME', 'gitlab')}\n",
        f"GITLAB_AUTO_COMMIT_MESSAGE={config.get('GITLAB_AUTO_COMMIT_MESSAGE', '')}\n",
    ]

    with open(env_file, 'w', encoding='utf-8') as f:
        f.writelines(lines)

    print_success(f"Configuration saved to {env_file}")


def detect_gitlab_config():
    """Detect existing GitLab configuration from git"""
    gitlab_info = {}

    try:
        # Get git remotes
        result = subprocess.run(
            ['git', 'remote', '-v'],
            capture_output=True,
            text=True,
            timeout=5
        )

        for line in result.stdout.split('\n'):
            if 'gitlab' in line.lower():
                parts = line.split()
                if len(parts) >= 2:
                    url = parts[1]
                    gitlab_info['url'] = url

                    # Extract username from URL
                    if '@' in url:
                        # Format: https://username:token@gitlab.com/...
                        user_part = url.split('@')[0]
                        if ':' in user_part:
                            username = user_part.split(':')[-1]
                            if username and username != 'oauth2':
                                gitlab_info['username'] = username

                    print_info(f"Detected existing GitLab remote: {url}")
                    break
    except:
        pass

    # Check for previous GitLab config in git config
    try:
        result = subprocess.run(
            ['git', 'config', '--get', 'user.name'],
            capture_output=True,
            text=True,
            timeout=5
        )
        if result.returncode == 0 and result.stdout.strip():
            gitlab_info['git_user'] = result.stdout.strip()

        result = subprocess.run(
            ['git', 'config', '--get', 'user.email'],
            capture_output=True,
            text=True,
            timeout=5
        )
        if result.returncode == 0 and result.stdout.strip():
            gitlab_info['git_email'] = result.stdout.strip()
    except:
        pass

    return gitlab_info


def ask_slack_config(existing_config):
    """Ask for Slack configuration"""
    print_step(1, "Slack Configuration")

    config = {}

    # Slack Bot Token
    existing_token = existing_config.get('SLACK_BOT_TOKEN', '')
    if existing_token and existing_token != 'xoxb-YOUR-TOKEN-HERE':
        print(f"\nCurrent Slack Bot Token: {existing_token[:20]}...{existing_token[-10:]}")
        use_existing = input("Use existing token? [Y/n]: ").strip().lower()
        if use_existing != 'n':
            config['SLACK_BOT_TOKEN'] = existing_token
        else:
            config['SLACK_BOT_TOKEN'] = input("Enter Slack Bot Token (xoxb-...): ").strip()
    else:
        print("\nSlack Bot Token:")
        print("  Get it from: https://api.slack.com/apps")
        print("  Required scopes: chat:write, chat:write.public")
        config['SLACK_BOT_TOKEN'] = input("\nEnter Slack Bot Token (xoxb-...): ").strip()

    # Slack Channel ID
    existing_channel = existing_config.get('SLACK_CHANNEL_ID', '')
    if existing_channel:
        print(f"\nCurrent Slack Channel: {existing_channel}")
        use_existing = input("Use existing channel? [Y/n]: ").strip().lower()
        if use_existing != 'n':
            config['SLACK_CHANNEL_ID'] = existing_channel
        else:
            config['SLACK_CHANNEL_ID'] = input("Enter Slack Channel ID (C... or #channel-name): ").strip()
    else:
        config['SLACK_CHANNEL_ID'] = input("\nEnter Slack Channel ID (C... or #channel-name): ").strip()

    # User Name
    existing_user = existing_config.get('SLACK_USER_NAME', '')
    if existing_user:
        print(f"\nCurrent User Name: {existing_user}")
        use_existing = input("Use existing name? [Y/n]: ").strip().lower()
        if use_existing != 'n':
            config['SLACK_USER_NAME'] = existing_user
        else:
            config['SLACK_USER_NAME'] = input("Enter your name (optional): ").strip()
    else:
        config['SLACK_USER_NAME'] = input("\nEnter your name (optional, press Enter to skip): ").strip()

    config['ULTRATHINK_AUTO_LOG'] = 'true'

    return config


def ask_gitlab_config(existing_config, gitlab_info):
    """Ask for GitLab configuration"""
    print_step(2, "GitLab Configuration (Optional)")

    config = {}

    print("\nDo you want to enable GitLab auto-push?")
    print("  - Automatically commits and pushes changes on SessionEnd/Stop")
    enable = input("Enable GitLab auto-push? [y/N]: ").strip().lower()

    if enable != 'y':
        config['GITLAB_AUTO_PUSH_ENABLED'] = 'false'
        return config

    config['GITLAB_AUTO_PUSH_ENABLED'] = 'true'

    # GitLab Repository URL
    existing_url = existing_config.get('GITLAB_REPO_URL', '')
    detected_url = gitlab_info.get('url', '')

    if detected_url:
        print(f"\n✅ Detected GitLab repository: {detected_url}")
        use_detected = input("Use this repository? [Y/n]: ").strip().lower()
        if use_detected != 'n':
            config['GITLAB_REPO_URL'] = detected_url
        else:
            config['GITLAB_REPO_URL'] = input("Enter GitLab Repository URL: ").strip()
    elif existing_url:
        print(f"\nCurrent GitLab Repository: {existing_url}")
        use_existing = input("Use existing repository? [Y/n]: ").strip().lower()
        if use_existing != 'n':
            config['GITLAB_REPO_URL'] = existing_url
        else:
            config['GITLAB_REPO_URL'] = input("Enter GitLab Repository URL: ").strip()
    else:
        print("\nNo GitLab repository detected.")
        print("You can:")
        print("  1. Run setup wizard: python3 ~/.claude-hooks/setup_gitlab.py")
        print("  2. Enter URL manually")
        choice = input("\nEnter URL manually? [y/N]: ").strip().lower()
        if choice == 'y':
            config['GITLAB_REPO_URL'] = input("Enter GitLab Repository URL: ").strip()
        else:
            config['GITLAB_REPO_URL'] = ''
            print_info("You can run setup_gitlab.py later to configure GitLab")

    # GitLab Access Token
    existing_token = existing_config.get('GITLAB_ACCESS_TOKEN', '')
    if existing_token:
        print(f"\nCurrent GitLab Token: {existing_token[:10]}...{existing_token[-5:]}")
        use_existing = input("Use existing token? [Y/n]: ").strip().lower()
        if use_existing != 'n':
            config['GITLAB_ACCESS_TOKEN'] = existing_token
        else:
            print("\nGitLab Access Token:")
            print("  Create at: GitLab > Settings > Access Tokens")
            print("  Required scopes: api, write_repository")
            config['GITLAB_ACCESS_TOKEN'] = input("Enter GitLab Access Token: ").strip()
    else:
        print("\nGitLab Access Token:")
        print("  Create at: GitLab > Settings > Access Tokens")
        print("  Required scopes: api, write_repository")
        token = input("Enter GitLab Access Token (or press Enter to skip): ").strip()
        config['GITLAB_ACCESS_TOKEN'] = token if token else ''

    # GitLab account info
    if gitlab_info.get('git_user'):
        print(f"\n✅ Detected Git user: {gitlab_info['git_user']}")
        if gitlab_info.get('git_email'):
            print(f"✅ Detected Git email: {gitlab_info['git_email']}")

    config['GITLAB_REMOTE_NAME'] = existing_config.get('GITLAB_REMOTE_NAME', 'gitlab')
    config['GITLAB_AUTO_COMMIT_MESSAGE'] = existing_config.get('GITLAB_AUTO_COMMIT_MESSAGE', '')

    return config


def copy_hook_files():
    """Copy hook files to ~/.claude-hooks"""
    print_step(3, "Installing Hook Files")

    source_dir = Path(__file__).parent
    hooks_dir = Path.home() / '.claude-hooks'

    # Create directory if not exists
    hooks_dir.mkdir(exist_ok=True)

    files = [
        'SessionStart', 'SessionEnd', 'Stop', 'Notification',
        'session-start', 'session-end', 'stop', 'notification',
        'analyze_transcript.py', 'auto_update.py',
        'auto_push_gitlab.py', 'setup_gitlab.py', 'update'
    ]

    copied = 0
    for filename in files:
        src = source_dir / filename
        if src.exists():
            dst = hooks_dir / filename
            shutil.copy2(src, dst)
            os.chmod(dst, 0o755)
            copied += 1

    print_success(f"Copied {copied} files to {hooks_dir}")
    return True


def main():
    """Main setup flow"""
    print_header("Claude Hooks - Complete Setup")

    print("This setup will configure:")
    print("  • Slack notifications")
    print("  • GitLab auto-push (optional)")
    print("  • Hook system installation")
    print("\nExisting settings will be detected and offered for reuse.")

    input("\nPress Enter to continue...")

    # Load existing configuration
    existing_config = load_existing_config()

    # Detect GitLab configuration
    gitlab_info = detect_gitlab_config()
    if gitlab_info:
        print_info("Detected GitLab configuration:")
        for key, value in gitlab_info.items():
            print(f"  {key}: {value}")

    # Ask for Slack configuration
    slack_config = ask_slack_config(existing_config)

    # Ask for GitLab configuration
    gitlab_config = ask_gitlab_config(existing_config, gitlab_info)

    # Merge configurations
    final_config = {
        **existing_config,
        **slack_config,
        **gitlab_config,
        'AUTO_UPDATE_ENABLED': existing_config.get('AUTO_UPDATE_ENABLED', 'true'),
        'UPDATE_CHECK_INTERVAL': existing_config.get('UPDATE_CHECK_INTERVAL', '86400'),
    }

    # Save configuration
    print_step(3, "Saving Configuration")
    save_config(final_config)

    # Copy hook files
    copy_hook_files()

    # Final summary
    print_header("✅ Setup Complete!")

    print("Configuration Summary:")
    print(f"  • Slack Token: {'✅ Set' if final_config.get('SLACK_BOT_TOKEN') else '❌ Not set'}")
    print(f"  • Slack Channel: {final_config.get('SLACK_CHANNEL_ID', 'Not set')}")
    print(f"  • User Name: {final_config.get('SLACK_USER_NAME', 'Not set')}")
    print(f"  • GitLab Auto-Push: {'✅ Enabled' if final_config.get('GITLAB_AUTO_PUSH_ENABLED') == 'true' else '❌ Disabled'}")
    if final_config.get('GITLAB_AUTO_PUSH_ENABLED') == 'true':
        print(f"  • GitLab Repository: {final_config.get('GITLAB_REPO_URL', 'Not set')}")

    print("\nFrom now on, when using Claude Code:")
    print("  ✅ Auto Slack notifications on completion")
    print("  ✅ Commands are summarized cleanly")
    if final_config.get('GITLAB_AUTO_PUSH_ENABLED') == 'true':
        print("  ✅ Auto GitLab push on changes")

    print("\nJust use Claude Code - everything is automatic!")
    print()


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n❌ Setup cancelled")
        sys.exit(1)
    except Exception as e:
        print(f"\n❌ Error: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
